// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(TEAM_MEMBER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  socialAccounts SocialAccount[]
  posts         Post[]
  templates     Template[]
  documents     Document[]
  teamMembers   TeamMember[]
  activities    Activity[]
  tasks         Task[]
  assignedTasks Task[]     @relation("TaskAssignment")
  notifications Notification[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SocialAccount {
  id                String   @id @default(cuid())
  provider          String
  providerAccountId String
  accessToken       String?
  refreshToken      String?
  expiresAt         Int?
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  // Add more fields as needed for each platform
}

model Post {
  id          String        @id @default(cuid())
  title       String
  content     String
  mediaUrls   String? // JSON array of media URLs
  platform    Platform
  status      PostStatus    @default(DRAFT)
  scheduledAt DateTime?
  publishedAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  socialAccountId String?
  socialAccount SocialAccount? @relation(fields: [socialAccountId], references: [id])
  templateId  String?
  template    Template?     @relation(fields: [templateId], references: [id])
}

model Template {
  id          String   @id @default(cuid())
  name        String
  description String?
  content     String
  type        TemplateType
  platform    Platform?
  tags        String? // JSON array of tags
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts       Post[]
}

model Document {
  id          String   @id @default(cuid())
  name        String
  type        DocumentType
  content     String?
  fileUrl     String?
  insights    String? // JSON object of AI insights
  isProcessed Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TeamMember {
  id        String   @id @default(cuid())
  role      UserRole
  joinedAt  DateTime @default(now())

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members     TeamMember[]
}

model Activity {
  id          String       @id @default(cuid())
  action      String
  resource    String
  resourceId  String?
  details     String?
  ip          String?
  userAgent   String?
  createdAt   DateTime     @default(now())

  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(PENDING)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedToId String?
  assignedTo  User?      @relation("TaskAssignment", fields: [assignedToId], references: [id])
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ScheduledPost {
  id          String   @id @default(cuid())
  title       String
  content     String?
  platform    Platform
  scheduledAt DateTime
  status      PostStatus @default(SCHEDULED)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  // Add more fields as needed (e.g., media, postId, etc.)
}

model Media {
  id        String   @id @default(cuid())
  url       String
  type      String   // e.g., "image", "video"
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Add more fields as needed (e.g., tags, size, metadata)
}

enum UserRole {
  ADMIN
  TEAM_MEMBER
  CLIENT
}

enum Platform {
  INSTAGRAM
  FACEBOOK
  TWITTER
  LINKEDIN
  TIKTOK
  YOUTUBE
}

enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  FAILED
}

enum TemplateType {
  POST
  STORY
  REEL
  ARTICLE
  EMAIL
}

enum DocumentType {
  BUSINESS_PLAN
  BRAND_GUIDELINES
  MARKET_RESEARCH
  COMPETITOR_ANALYSIS
  CONTENT_STRATEGY
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
}
