// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(TEAM_MEMBER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  brandVoice    String?
  brandLogo     String?

  accounts       Account[]
  sessions       Session[]
  socialAccounts SocialAccount[]
  posts          Post[]
  templates      Template[]
  documents      Document[]
  teamMembers    TeamMember[]
  activities     Activity[]
  tasks          Task[]
  assignedTasks  Task[]          @relation("TaskAssignment")
  notifications  Notification[]
  messages       Message[]
  messageReplies MessageReply[]
  ScheduledPost  ScheduledPost[]
  Media          Media[]
  scheduledReports ScheduledReport[]
  dashboardPreference DashboardPreference?
  widgetConfigs  WidgetConfig[]
  notificationPreferences NotificationPreference[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SocialAccount {
  id                String   @id @default(cuid())
  provider          String
  providerAccountId String
  accessToken       String?
  refreshToken      String?
  expiresAt         Int?
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  posts    Post[]
  messages Message[]
}

model Post {
  id          String     @id @default(cuid())
  title       String
  content     String
  mediaUrls   String? // JSON array of media URLs
  platform    Platform
  status      PostStatus @default(DRAFT)
  scheduledAt DateTime?
  publishedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  userId          String
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  socialAccountId String?
  socialAccount   SocialAccount? @relation(fields: [socialAccountId], references: [id])
  templateId      String?
  template        Template?      @relation(fields: [templateId], references: [id])
}

model Template {
  id          String       @id @default(cuid())
  name        String
  description String?
  content     String
  type        TemplateType
  platform    Platform?
  tags        String? // JSON array of tags
  isPublic    Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts  Post[]
}

model Document {
  id          String       @id @default(cuid())
  name        String
  type        DocumentType
  content     String?
  fileUrl     String?
  insights    String? // JSON object of AI insights
  isProcessed Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TeamMember {
  id       String   @id @default(cuid())
  role     UserRole
  joinedAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members TeamMember[]
  invites TeamInvite[]
  permissions TeamPermission[]
}

model Activity {
  id         String   @id @default(cuid())
  action     String
  resource   String
  resourceId String?
  details    String?
  ip         String?
  userAgent  String?
  createdAt  DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  type        TaskType   @default(CONTENT)
  status      TaskStatus @default(PENDING)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  userId       String
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedToId String?
  assignedTo   User?   @relation("TaskAssignment", fields: [assignedToId], references: [id])
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ScheduledPost {
  id          String     @id @default(cuid())
  title       String
  content     String?
  platform    Platform
  scheduledAt DateTime
  status      PostStatus @default(SCHEDULED)
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  // Add more fields as needed (e.g., media, postId, etc.)
}

model Media {
  id        String   @id @default(cuid())
  url       String
  type      String // e.g., "image", "video"
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Add more fields as needed (e.g., tags, size, metadata)
}

model Message {
  id           String      @id @default(cuid())
  platform     Platform
  type         MessageType
  externalId   String // ID from the social platform
  senderName   String
  senderId     String // External sender ID
  senderAvatar String?
  content      String
  postId       String? // If this is a comment, link to the post
  postTitle    String? // Title of the post being commented on
  isRead       Boolean     @default(false)
  isReplied    Boolean     @default(false)
  sentiment    Sentiment   @default(NEUTRAL)
  priority     Priority    @default(MEDIUM)
  metadata     String? // JSON object for platform-specific data
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  userId          String
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  socialAccountId String?
  socialAccount   SocialAccount? @relation(fields: [socialAccountId], references: [id])
  replies         MessageReply[]
}

model MessageReply {
  id        String    @id @default(cuid())
  content   String
  isDraft   Boolean   @default(false)
  isSent    Boolean   @default(false)
  sentAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  messageId String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ScheduledReport {
  id              String   @id @default(cuid())
  name            String
  reportType      String   // campaign, posts, audience, engagement, messages
  format          String   // json, csv, pdf
  frequency       String   // daily, weekly, monthly
  dayOfWeek       Int?     // 0-6 (Sunday-Saturday) for weekly reports
  dayOfMonth      Int?     // 1-31 for monthly reports
  time            String   // HH:MM format
  platform        String?  // specific platform or null for all
  includeCharts   Boolean  @default(true)
  emailRecipients String?  // JSON array of email addresses
  isActive        Boolean  @default(true)
  nextRun         DateTime
  lastRun         DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DashboardPreference {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Layout configuration
  layout    String   // JSON string containing grid layout
  theme     String   @default("light") // light, dark, auto
  
  // Widget preferences
  widgets   String   // JSON array of enabled widget IDs and their settings
  
  // Dashboard settings
  refreshInterval Int @default(300) // seconds, 0 for manual refresh
  autoRefresh     Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}

model WidgetConfig {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  widgetId    String   // Unique identifier for the widget type
  widgetType  String   // Type of widget (stats, chart, table, etc.)
  title       String   // Custom title for the widget
  position    Int      // Position in the grid
  size        String   // small, medium, large, full
  isVisible   Boolean  @default(true)
  settings    String?  // JSON object with widget-specific settings
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, widgetId])
}

model TeamInvite {
  id        String   @id @default(cuid())
  email     String
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  invitedBy String   // userId of inviter
  role      UserRole @default(TEAM_MEMBER)
  status    InviteStatus @default(PENDING)
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  acceptedAt DateTime?
  rejectedAt DateTime?
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

model TeamPermission {
  id        String   @id @default(cuid())
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  role      UserRole
  resource  String   // e.g. "dashboard", "analytics", "messages"
  action    String   // e.g. "view", "edit", "delete", "manage"
  allowed   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([teamId, role, resource, action])
}

enum UserRole {
  ADMIN
  TEAM_MEMBER
  CLIENT
}

enum Platform {
  INSTAGRAM
  FACEBOOK
  TWITTER
  LINKEDIN
  TIKTOK
  YOUTUBE
}

enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  FAILED
}

enum TemplateType {
  POST
  STORY
  REEL
  ARTICLE
  EMAIL
}

enum DocumentType {
  BUSINESS_PLAN
  BRAND_GUIDELINES
  MARKET_RESEARCH
  COMPETITOR_ANALYSIS
  CONTENT_STRATEGY
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
}

enum MessageType {
  COMMENT
  DIRECT_MESSAGE
  MENTION
  REPLY
  REACTION
}

enum Sentiment {
  POSITIVE
  NEUTRAL
  NEGATIVE
  URGENT
}

enum TaskType {
  CONTENT
  ENGAGEMENT
}

model NotificationPreference {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventType String   // e.g. 'TASK_ASSIGNED', 'TASK_COMPLETED', etc.
  email     Boolean  @default(true)
  sms       Boolean  @default(false)
  inApp     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, eventType])
}
